# coding=gbk
'''
Created on 2017年10月24日

@author: RHy0ThoM
'''

import queue
import time, sys
from multiprocessing.managers import BaseManager
from AttackGraphCore.DepthFirstSearch import PERFORMDFS
from NetworkModel.HyperGraph import HyperGraph
from AttackGraphStructure.AttackGraph import AttackGraph


# 创建类似的QueueManager:
class QueueManager(BaseManager):
    pass

# 由于这个QueueManager只从网络上获取Queue，所以注册时只提供名字:
QueueManager.register('get_task_queue')
QueueManager.register('get_result_queue')

# 连接到服务器，也就是运行task_master.py的机器:
server_addr = '10.1.112.30'
print('Connect to server %s...' % server_addr)
# 端口和验证码注意保持与task_master.py设置的完全一致:
m = QueueManager(address=(server_addr, 5000), authkey=b'abc')
# 从网络连接:
m.connect()
# 获取Queue的对象:
task = m.get_task_queue()
result = m.get_result_queue()
# 从task队列取任务,并把结果写入result队列:
TargetNetwork=HyperGraph( )
IPRGS=[]
partialAttackGraph=AttackGraph()
try:
    PERFORMDFS(TargetNetwork, IPRGS)
    time.sleep(1)
    result.put()
except queue.Empty:
    print('task queue is empty.')
# 处理结束:
print('worker exit.')